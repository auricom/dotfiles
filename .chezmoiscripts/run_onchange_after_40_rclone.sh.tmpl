#!/usr/bin/env bash

# Rclone configuration script
# Generates rclone configuration from template and token
# Hash dependencies for change detection:
# rclone.conf.base: {{ include "private_dot_config/private_rclone/encrypted_rclone.conf.base.age" | sha256sum }}
# rclone.conf.token: {{ include "private_dot_config/private_rclone/encrypted_rclone.conf.token.age" | sha256sum }}

set -euo pipefail

# Source utility functions
source "{{ .chezmoi.homeDir }}/scripts/lib/chezmoi_utils.sh"

main() {
    log_section "Configuring rclone"

    local rclone_conf="{{ .chezmoi.homeDir }}/.config/rclone/rclone.conf"
    local rclone_base="${rclone_conf}.base"
    local rclone_token="${rclone_conf}.token"

    # Check if configuration needs to be generated
    if should_generate_config "$rclone_conf" "$rclone_token"; then
        generate_rclone_config "$rclone_conf" "$rclone_base" "$rclone_token"
    else
        log_info "Rclone configuration is up to date"
    fi

    log_info "Rclone configuration completed"
}

should_generate_config() {
    local rclone_conf="$1"
    local rclone_token="$2"

    # Generate if config doesn't exist
    if [[ ! -f "$rclone_conf" ]]; then
        return 0
    fi

    # Generate if token file doesn't exist
    if [[ ! -f "$rclone_token" ]]; then
        log_warn "Token file not found: $rclone_token"
        return 1
    fi

    # Check if token in config matches token file
    local token_actual
    token_actual=$(grep 'token' "$rclone_conf" 2>/dev/null | awk '{print $3}' || echo "")

    local token_template
    token_template=$(cat "$rclone_token" 2>/dev/null || echo "")

    if [[ -z "$token_actual" || "$token_actual" != "$token_template" ]]; then
        return 0
    fi

    return 1
}

generate_rclone_config() {
    local rclone_conf="$1"
    local rclone_base="$2"
    local rclone_token="$3"

    if [[ ! -f "$rclone_base" ]]; then
        log_error "Base configuration file not found: $rclone_base"
        exit 1
    fi

    if [[ ! -f "$rclone_token" ]]; then
        log_error "Token file not found: $rclone_token"
        exit 1
    fi

    log_info "Generating rclone configuration"

    local token_template
    token_template=$(cat "$rclone_token")

    # Ensure config directory exists
    ensure_dir "$(dirname "$rclone_conf")"

    # Generate configuration using awk
    awk -v new_token="$token_template" '
    BEGIN { token_updated = 0 }
    /^\[gdrive\]/ { in_gdrive = 1 }
    in_gdrive && /^token/ {
        $3 = new_token
        token_updated = 1
    }
    { print }
    END {
        if (in_gdrive && !token_updated) {
            print "token = " new_token
        }
    }
    ' "$rclone_base" > "${rclone_conf}.tmp"

    # Atomically move the new configuration into place
    mv "${rclone_conf}.tmp" "$rclone_conf"

    log_info "Rclone configuration generated successfully"
}

# Run main function
main "$@"
