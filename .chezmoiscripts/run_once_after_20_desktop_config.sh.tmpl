{{- if .desktop -}}
#!/usr/bin/env bash

# Desktop environment configuration script
# Configures GNOME settings and desktop preferences

set -euo pipefail

# Source utility functions
source "{{ .chezmoi.homeDir }}/scripts/lib/chezmoi_utils.sh"

main() {
    log_section "Configuring desktop environment"

    # Configure GNOME settings
    configure_gnome_settings

    # Configure Ptyxis transparency
    configure_ptyxis

    # Deactivate swap if system has > 32GB RAM
    deactivate_swap_if_high_memory

    # Install GNOME extensions (commented out for now)
    # install_gnome_extensions

    log_info "Desktop configuration completed"
}

configure_gnome_settings() {
    if ! command_exists gsettings; then
        log_warn "gsettings not available, skipping GNOME configuration"
        return
    fi

    log_info "Configuring GNOME settings"

    # Font settings
    log_info "Setting monospace font"
    gsettings set org.gnome.desktop.interface monospace-font-name 'IBM Plex Mono Medium 11'

    # Cursor theme
    log_info "Setting cursor theme"
    gsettings set org.gnome.desktop.interface cursor-theme 'Bibata-Modern-Classic'

    # Dash-to-Dock settings
    log_info "Configuring Dash-to-Dock"
    gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed false

    # Keyboard layout
    log_info "Setting keyboard layout to qwerty-fr"
    gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us_qwerty-fr')]"
}

configure_ptyxis() {
    if command_exists ujust; then
        log_info "Configuring Ptyxis transparency"
        ujust ptyxis-transparency
    else
        log_warn "ujust not available, skipping Ptyxis configuration"
    fi
}

deactivate_swap_if_high_memory() {
    log_info "Checking system memory for swap configuration"

    # Get total memory in KB from /proc/meminfo
    local total_memory_kb
    total_memory_kb=$(grep '^MemTotal:' /proc/meminfo | awk '{print $2}')

    if [[ -z "$total_memory_kb" ]]; then
        log_warn "Could not determine total system memory, skipping swap configuration"
        return
    fi

    # Convert to GB (1 GB = 1024 * 1024 KB)
    local total_memory_gb=$((total_memory_kb / 1024 / 1024))

    log_info "Total system memory: ${total_memory_gb}GB"

    if [[ $total_memory_gb -gt 32 ]]; then
        log_info "System has more than 32GB RAM (${total_memory_gb}GB), deactivating swap"

        # Check if swap is currently active
        if swapon --show | grep -q .; then
            log_info "Deactivating active swap"
            if sudo swapoff -a; then
                log_info "Successfully deactivated swap"
            else
                log_warn "Failed to deactivate swap"
                return
            fi
        else
            log_info "No active swap found"
        fi

        # Comment out swap entries in /etc/fstab to prevent swap activation on boot
        if [[ -f /etc/fstab ]] && grep -q '^[^#].*swap' /etc/fstab; then
            log_info "Disabling swap entries in /etc/fstab"
            if sudo sed -i 's/^\([^#].*swap.*\)$/#\1/' /etc/fstab; then
                log_info "Successfully disabled swap entries in /etc/fstab"
            else
                log_warn "Failed to modify /etc/fstab"
            fi
        else
            log_info "No uncommented swap entries found in /etc/fstab"
        fi
    else
        log_info "System has ${total_memory_gb}GB RAM (â‰¤32GB), keeping swap configuration unchanged"
    fi
}

install_gnome_extensions() {
    if ! command_exists gext; then
        log_warn "gext not available, skipping GNOME extensions installation"
        return
    fi

    log_info "Installing GNOME extensions"

    local extensions=(
        # "nightthemeswitcher@romainvigier.fr"
        # "tilingshell@ferrarodomenico.com"
        # "streamcontroller@core447.com"
        # "Vitals@CoreCoding.com"
        # "window-calls@domandoman.xyz"
    )

    for extension in "${extensions[@]}"; do
        if ! gnome-extensions list | grep -q "$extension"; then
            log_info "Installing extension: $extension"
            gext install "$extension"
        else
            log_info "Extension already installed: $extension"
        fi
    done
}

# Run main function
main "$@"
{{- end -}}
