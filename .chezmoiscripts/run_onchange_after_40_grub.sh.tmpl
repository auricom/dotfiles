{{- if .desktop -}}
#!/usr/bin/env bash

# GRUB theme and configuration script
# Manages GRUB theme installation and configuration

set -euo pipefail

# Source utility functions
source "{{ .chezmoi.homeDir }}/scripts/lib/chezmoi_utils.sh"

readonly GRUB_LOCAL="${HOME}/.local/share/grub"
readonly GRUB_THEME="hyperfluent-fedora"
readonly GRUB_THEME_SOURCE="${GRUB_LOCAL}/${GRUB_THEME}.tar.gz"
readonly GRUB_THEME_PATH="/boot/grub2/themes"
readonly GRUB_THEME_TARGET="${GRUB_THEME_PATH}/${GRUB_THEME}"
readonly CHECKSUM_FILE="${GRUB_LOCAL}/${GRUB_THEME}.checksum"
readonly GRUB_CONFIG_FILE="/etc/default/grub"
readonly GRUB_THEME_VALUE="${GRUB_THEME_TARGET}/theme.txt"

main() {
    log_section "Managing GRUB theme and configuration"

    # Install GRUB theme if needed
    install_grub_theme

    # Configure GRUB settings
    configure_grub_settings

    log_info "GRUB configuration completed"
}

install_grub_theme() {
    if [[ ! -d "$GRUB_THEME_SOURCE" ]]; then
        log_warn "GRUB theme source not found: $GRUB_THEME_SOURCE"
        return
    fi

    local sha_source
    sha_source=$(dir_sha256 "$GRUB_THEME_SOURCE")

    local sha_stored=""
    if [[ -f "$CHECKSUM_FILE" ]]; then
        sha_stored=$(cat "$CHECKSUM_FILE")
    fi

    if [[ "$sha_source" != "$sha_stored" ]]; then
        log_info "Installing GRUB theme"

        # Update checksum
        echo "$sha_source" > "$CHECKSUM_FILE"

        # Prepare theme directory
        if [[ -d "$GRUB_THEME_TARGET" ]]; then
            sudo rm -rf "${GRUB_THEME_TARGET:?}"/*
        else
            sudo mkdir -p "$GRUB_THEME_TARGET"
        fi

        # Copy theme files
        sudo cp -r "${GRUB_THEME_SOURCE}/." "$GRUB_THEME_TARGET/"

        log_info "GRUB theme installed successfully"
    else
        log_info "GRUB theme is up to date"
    fi
}

configure_grub_settings() {
    if [[ ! -f "$GRUB_CONFIG_FILE" ]]; then
        log_error "GRUB configuration file not found: $GRUB_CONFIG_FILE"
        return 1
    fi

    local needs_update=false

    # Check if GRUB_TERMINAL_OUTPUT needs modification
    if grep -q '^GRUB_TERMINAL_OUTPUT="console"$' "$GRUB_CONFIG_FILE"; then
        needs_update=true
    fi

    # Check if GRUB_THEME needs modification
    if ! grep -q "^GRUB_THEME=${GRUB_THEME_VALUE}$" "$GRUB_CONFIG_FILE"; then
        needs_update=true
    fi

    if [[ "$needs_update" == "true" ]]; then
        log_info "Updating GRUB configuration"

        # Create backup
        sudo cp "$GRUB_CONFIG_FILE" "${GRUB_CONFIG_FILE}.bak"

        # Update GRUB_TERMINAL_OUTPUT
        if grep -q '^GRUB_TERMINAL_OUTPUT="console"$' "$GRUB_CONFIG_FILE"; then
            sudo sed -i 's/^GRUB_TERMINAL_OUTPUT="console"$/GRUB_TERMINAL_OUTPUT="gfxterm"/' "$GRUB_CONFIG_FILE"
            log_info "Updated GRUB_TERMINAL_OUTPUT to gfxterm"
        fi

        # Update or add GRUB_THEME
        if grep -q "^GRUB_THEME=" "$GRUB_CONFIG_FILE"; then
            sudo sed -i "s|^GRUB_THEME=.*|GRUB_THEME=${GRUB_THEME_VALUE}|" "$GRUB_CONFIG_FILE"
            log_info "Updated GRUB_THEME setting"
        else
            echo "GRUB_THEME=${GRUB_THEME_VALUE}" | sudo tee -a "$GRUB_CONFIG_FILE" >/dev/null
            log_info "Added GRUB_THEME setting"
        fi

        # Regenerate GRUB configuration
        log_info "Regenerating GRUB configuration"
        sudo grub2-mkconfig -o /etc/grub2.cfg

        log_info "GRUB configuration updated successfully"
    else
        log_info "GRUB configuration is up to date"
    fi
}

# Run main function
main "$@"
{{- end -}}
